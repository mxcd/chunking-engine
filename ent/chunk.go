// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/mxcd/chunking-engine/ent/chunk"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Chunk is the model entity for the Chunk schema.
type Chunk struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// T holds the value of the "t" field.
	T time.Time `json:"t,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Data holds the value of the "data" field.
	Data         []byte `json:"data,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chunk) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chunk.FieldData:
			values[i] = new([]byte)
		case chunk.FieldID:
			values[i] = new(sql.NullInt64)
		case chunk.FieldName:
			values[i] = new(sql.NullString)
		case chunk.FieldT:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chunk fields.
func (c *Chunk) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chunk.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case chunk.FieldT:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field t", values[i])
			} else if value.Valid {
				c.T = value.Time
			}
		case chunk.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case chunk.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil {
				c.Data = *value
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Chunk.
// This includes values selected through modifiers, order, etc.
func (c *Chunk) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Chunk.
// Note that you need to call Chunk.Unwrap() before calling this method if this Chunk
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Chunk) Update() *ChunkUpdateOne {
	return NewChunkClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Chunk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Chunk) Unwrap() *Chunk {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chunk is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Chunk) String() string {
	var builder strings.Builder
	builder.WriteString("Chunk(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("t=")
	builder.WriteString(c.T.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", c.Data))
	builder.WriteByte(')')
	return builder.String()
}

// Chunks is a parsable slice of Chunk.
type Chunks []*Chunk
