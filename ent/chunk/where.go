// Code generated by ent, DO NOT EDIT.

package chunk

import (
	"github.com/mxcd/chunking-engine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Chunk {
	return predicate.Chunk(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Chunk {
	return predicate.Chunk(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldLTE(FieldID, id))
}

// T applies equality check predicate on the "t" field. It's identical to TEQ.
func T(v time.Time) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldT, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldName, v))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v []byte) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldData, v))
}

// TEQ applies the EQ predicate on the "t" field.
func TEQ(v time.Time) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldT, v))
}

// TNEQ applies the NEQ predicate on the "t" field.
func TNEQ(v time.Time) predicate.Chunk {
	return predicate.Chunk(sql.FieldNEQ(FieldT, v))
}

// TIn applies the In predicate on the "t" field.
func TIn(vs ...time.Time) predicate.Chunk {
	return predicate.Chunk(sql.FieldIn(FieldT, vs...))
}

// TNotIn applies the NotIn predicate on the "t" field.
func TNotIn(vs ...time.Time) predicate.Chunk {
	return predicate.Chunk(sql.FieldNotIn(FieldT, vs...))
}

// TGT applies the GT predicate on the "t" field.
func TGT(v time.Time) predicate.Chunk {
	return predicate.Chunk(sql.FieldGT(FieldT, v))
}

// TGTE applies the GTE predicate on the "t" field.
func TGTE(v time.Time) predicate.Chunk {
	return predicate.Chunk(sql.FieldGTE(FieldT, v))
}

// TLT applies the LT predicate on the "t" field.
func TLT(v time.Time) predicate.Chunk {
	return predicate.Chunk(sql.FieldLT(FieldT, v))
}

// TLTE applies the LTE predicate on the "t" field.
func TLTE(v time.Time) predicate.Chunk {
	return predicate.Chunk(sql.FieldLTE(FieldT, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Chunk {
	return predicate.Chunk(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Chunk {
	return predicate.Chunk(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldContainsFold(FieldName, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v []byte) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v []byte) predicate.Chunk {
	return predicate.Chunk(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...[]byte) predicate.Chunk {
	return predicate.Chunk(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...[]byte) predicate.Chunk {
	return predicate.Chunk(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v []byte) predicate.Chunk {
	return predicate.Chunk(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v []byte) predicate.Chunk {
	return predicate.Chunk(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v []byte) predicate.Chunk {
	return predicate.Chunk(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v []byte) predicate.Chunk {
	return predicate.Chunk(sql.FieldLTE(FieldData, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chunk) predicate.Chunk {
	return predicate.Chunk(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chunk) predicate.Chunk {
	return predicate.Chunk(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chunk) predicate.Chunk {
	return predicate.Chunk(sql.NotPredicates(p))
}
